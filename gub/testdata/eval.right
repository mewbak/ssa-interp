Gub version 0.2
Type 'h' for help
Running....
->  main()
testdata/expr.go:84:6
# Test of eval
# Use with expr.go
Setting highlight off
Step over...
--- main()
testdata/expr.go:86:2-97:3
Step over...
--- main()
testdata/expr.go:99:2-114:3
Step over...
--- main()
testdata/expr.go:101:3-35
# Should be able to see expr
Kind = Type = string
(string) "\"quoted\" string with backslash \\ foo "
(interface {}) <nil>

# -2
Kind = Type = int64
(int64) -2
(interface {}) <nil>

# 5 == 6
Kind = Type = bool
(bool) false
(interface {}) <nil>

# 5 < 6
Kind = Type = bool
(bool) true
(interface {}) <nil>

# 1 << n
** Error evaluating expression '1 << n' (n undefined)

## FIXME: reinstate
## 1 << 8
## eval 1 << 8
# y(
y(
--^
** parse error: 1:3: expected ')', found 'EOF'
# exprs
exprs is in the environment
	exprs = {"\"quoted\" string with backslash \\", "f(3.14)*2 + c", "-2  ", " 5 == 6", "5\t< 6", "1+2", "(1+2)*3", "1 << n", "1 << 8", "y("}
# eval exprs[0]
Kind = interface
Type = interp.Value
(string) "\"quoted\" string with backslash \\"
(interface {}) <nil>

# eval exprs[100]
** Error evaluating expression 'exprs[100]' (slice index out of range)

# eval exprs[-9]
** Error evaluating expression 'exprs[-9]' (invalid slice index -9 (index must be non-negative))

# eval os.O_RDWR | 4
Kind = Type = int64
(int64) 6
(interface {}) <nil>

# eval os.Args
Kind = slice
Type = []interp.Value
([]interp.Value) {
 (string) "main"
}
(interface {}) <nil>

# eval os.Args[0]
Kind = interface
Type = interp.Value
(string) "main"
(interface {}) <nil>

# eval "we have: " + exprs[5] + "."
Kind = Type = string
(string) "we have: 1+2."
(interface {}) <nil>

# eval len("abc") # -- builtin len() with string
Kind = Type = int
(int) 3
(interface {}) <nil>

# eval len(exprs) # -- builtin len() with array
Kind = Type = int
(int) 10
(interface {}) <nil>

# eval fmt.Println("Hi there!") # -- Eval package fn
Hi there!
Kind = Multi-Value
(int) 10
, nil
## FIXME eval should handle types better
## Shouldn't need the int(20) below
# eval strconv.Atoi("13") + int(20) # -- Eval package fn expression
Kind = Type = int
(int) 33
(interface {}) <nil>

gub: That's all folks...
